# -*- coding: utf-8 -*-
"""
Created on Thu Feb 22 16:00:45 2024

@author: Alejandra
"""
import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.models import Model
from keras.layers import Dense, Dropout, Flatten, Normalization, Conv1D, InputLayer, BatchNormalization
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from numpy import mean,std
from sklearn.metrics import confusion_matrix
from keras.utils.vis_utils import plot_model

#Raw and corresponding clean data in excel files
data = pd.read_excel(r'C:\Users\Alejandra\OneDrive - UBC\Documents\Architecture tuning\AEpaperRound2Sept2025\12409ProstSpectraCompletesetCR3.xlsx',header=None,sheet_name='RawCRz582')  
y_data = pd.read_excel(r'C:\Users\Alejandra\OneDrive - UBC\Documents\Architecture tuning\AEpaperRound2Sept2025\12409ProstSpectraCompletesetCR3.xlsx',header=None,sheet_name='BLsmoothz582')  #'BLsmoothz582'



# Convert the 2D spectra matrix  to 3D array so that input is acceptable to the CNN. 
#From (num of spectra) x (num of points) matrix to a (num of spectra) x (num of points) x (1)
Data = np.expand_dims(data, -1) 
y_Data = np.expand_dims(y_data, -1)  


##Test sets for k-fold cross-validation are defined at the patient level.
##Patients were previously assigned randomly to a given test-fold set (4 to 5 patients per fold ~ 20% of the total data set)
##Then the entire spectra for such patients are removed to test the final model (trained with remaining data)
##Process repeated for all k-folds
#Row idx range in data matrix for the test patients -fold 2, 3, 4
a=4488
b=6199

c=11772
d=12409

RawTestPatients = np.concatenate((Data[a:b], Data[c:d]), axis=0)
y_TestPatients = np.concatenate((y_Data[a:b], y_Data[c:d]), axis=0)

indices_to_delete = np.concatenate((np.arange(a, b), np.arange(c, d)))
Remaindata = np.delete(Data, indices_to_delete, axis=0)
y_Remaindata = np.delete(y_Data, indices_to_delete, axis=0)


#Random number generator: set seed for reproducible results
seedy=160000 
np.random.seed(seedy)
tf.random.set_seed(seedy) 


#Splitting Raw and target spectra in Remaindata and y_Remaindata into training and validation sets
from sklearn.model_selection import train_test_split
X_train, X_val, y_train, y_val = train_test_split(Remaindata, y_Remaindata, test_size=0.10,random_state=seedy)

#Define AE architecture
from tensorflow.keras import layers
kersize=10

model = keras.Sequential(
    [
        layers.Input(shape=(X_train.shape[1],X_train.shape[2])), 
        layers.Conv1D(
            filters=16, kernel_size=kersize, strides=2,padding="same",activation="relu"
        ),   
        layers.Conv1D(
            filters=32, kernel_size=kersize, strides=3,padding="same",activation="relu"
        ),
        layers.Conv1D(
            filters=64, kernel_size=kersize, strides=3,padding="valid",activation="relu"
        ),
        layers.Conv1DTranspose(
            filters=64, kernel_size=kersize, strides=3,padding="valid",activation="relu"
        ),
        layers.Conv1DTranspose(
            filters=32, kernel_size=kersize, strides=3,padding="same",activation="relu"
        ),
        layers.Conv1DTranspose(
            filters=16, kernel_size=kersize, strides=2,padding="same",activation="relu"
        ),
        layers.Conv1DTranspose(filters=1, kernel_size=kersize,padding="same"),
    ]
)

#Optimization parameters
model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-08,amsgrad=True), loss="mse") 
model.summary()


#Model training
history = model.fit(X_train,y_train,epochs=450,batch_size=30,validation_data=(X_val,y_val),callbacks=[keras.callbacks.EarlyStopping(monitor="val_loss", patience=20, mode="min",restore_best_weights=True)]) 

#Plot model if desired
#plot_model(model, to_file='AEProsBiopsy13Oct25noisytargetpat7Fold5.png', show_shapes=True, show_layer_names=True)


#plot MSE training loss as function of epochs to check training progress
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('training progress')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()



#Training set MAE loss: agreement between AE output and traget spectra
y_train_pred = model.predict(X_train)

train_mae_loss = np.mean(np.abs(y_train_pred - y_train), axis=1)
meantrainMAE= np.mean(train_mae_loss)


#Validation set MAE loss
y_val_pred = model.predict(X_val)

val_mae_loss = np.mean(np.abs(y_val_pred - y_val), axis=1)
meanvalMAE= np.mean(val_mae_loss)


#Test set (patient-wise test fold) loss
y_TestPatients_pred = model.predict(RawTestPatients)

patients_mae_loss = np.mean(np.abs(y_TestPatients_pred - y_TestPatients), axis=1)
meanpatientsMAE= np.mean(patients_mae_loss)
maxpatientsMAE= np.max(patients_mae_loss)


#Plot sample results 
randomidx=600
plt.plot(RawTestPatients[randomidx])
plt.plot(y_TestPatients[randomidx])
plt.plot(y_TestPatients_pred[randomidx])
plt.legend(['x_test','y_test_target' ,'y_test_AEpred'], loc='upper left')
plt.show()



#Save spectral results in spreadsheet.
RawTestPatients=np.reshape(RawTestPatients, (RawTestPatients.shape[0], RawTestPatients.shape[1]))
RawTestPatients = pd.DataFrame (RawTestPatients)

y_TestPatients=np.reshape(y_TestPatients, (y_TestPatients.shape[0], y_TestPatients.shape[1]))
y_TestPatients = pd.DataFrame (y_TestPatients)

y_TestPatients_pred=np.reshape(y_TestPatients_pred, (y_TestPatients_pred.shape[0], y_TestPatients_pred.shape[1]))
y_TestPatients_pred = pd.DataFrame (y_TestPatients_pred)


with pd.ExcelWriter('AEProsBiopsy29Oct25pat20Fold4.xlsx') as writer:  
    RawTestPatients.to_excel(writer, sheet_name='Xtest',index=False,header=False)
    y_TestPatients.to_excel(writer, sheet_name='YtestTarget',index=False,header=False)
    y_TestPatients_pred.to_excel(writer, sheet_name='YtestPred',index=False,header=False)


#Save trained model
model.save("AEProsBiopsy13Oct25pat20Fold4.h5")



#Row idx range in data matrix for the test patients - fold 1
#a=6199
#b=8588

#Defines test-fold set for current fold
#RawTestPatients=Data[a:b]
#y_TestPatients=y_Data[a:b]

#Defines training and validation sets for current fold
#Remaindata=np.delete(Data,np.arange(a,b), axis=0)
#y_Remaindata=np.delete(y_Data,np.arange(a,b), axis=0)




#Row idx range in data matrix for the test patients -fold 2, 3, 4
#a=0
#b=2029

#c=11338
#d=11772

#RawTestPatients = np.concatenate((Data[a:b], Data[c:d]), axis=0)
#y_TestPatients = np.concatenate((y_Data[a:b], y_Data[c:d]), axis=0)

#indices_to_delete = np.concatenate((np.arange(a, b), np.arange(c, d)))
#Remaindata = np.delete(Data, indices_to_delete, axis=0)
#y_Remaindata = np.delete(y_Data, indices_to_delete, axis=0)




#Row idx range in data matrix for the test patients -fold 5
#a=2029
#b=2713

#c=8588
#d=9329

#e=10220
#f=11338

#RawTestPatients = np.concatenate((Data[a:b], Data[c:d],Data[e:f]), axis=0)
#y_TestPatients = np.concatenate((y_Data[a:b], y_Data[c:d],y_Data[e:f]), axis=0)

#indices_to_delete = np.concatenate((np.arange(a, b), np.arange(c, d), np.arange(e, f)))
#Remaindata = np.delete(Data, indices_to_delete, axis=0)
#y_Remaindata = np.delete(y_Data, indices_to_delete, axis=0)
















